* Initialize configuration
** Use lexical binding

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t; -*-
#+END_SRC

** Upon startup, write message with startup details

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
 (lambda ()
  (message "Emacs ready in %s with %d garbage collections."
   (format "%.2f seconds"
    (float-time
     (time-subtract after-init-time before-init-time)))
   gcs-done)))
#+END_SRC

** Temporarily change garbage collection settings, and disable file-name-handler

#+BEGIN_SRC emacs-lisp
(let ((gc-cons-threshold-backup gc-cons-threshold)
      (gc-cons-percentage-backup gc-cons-percentage)
      file-name-handler-alist-backup file-name-handler-alist)
  ;; Change garbage collector settings and file-name-handler
  (setq gc-cons-threshold 402653184
	gc-cons-percentage 0.6
	file-name-handler-alist nil)
  ;; Then restore it as late as possible
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "Restored original settings")
	      (setq gc-cons-threshold gc-cons-threshold-backup
		    gc-cons-percentage gc-cons-percentage-backup
		    file-name-handler-alist (append file-name-handler-alist-backup file-name-handler-alist)))))
#+END_SRC

** Configure =custom-file=

Do not use =init.el= for =custom-*= code - use =custom.el=.
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC

Assuming that the code in custom-file is executed before the code
ahead of this line is not a safe assumption. So load this file
proactively.
#+BEGIN_SRC emacs-lisp
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

** Require and initialize =package=

#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
#+END_SRC

Add =melpa= to =package-archives=
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
#+END_SRC

** Install =use-package=

#+BEGIN_SRC emacs-lisp
(when (not (package-installed-p 'use-package))
 (package-refresh-contents)
 (package-install 'use-package))
#+END_SRC

* Utility functions
** Install =memoize=

=memoize= is a great library that can memoize functions.

For example the following code produces the output below.

#+BEGIN_SRC elisp :results output session :exports both
(defvar square-times-called 0)
(defmemoize-by-buffer-contents square (x)
  (setq square-times-called (+ square-times-called 1))
  (print (format "Called `square' for the %d-th time." square-times-called))
  (* x x))

(print (square 6))
(print (square 6))
(print (square 5))
#+END_SRC

#+RESULTS:
#+begin_example

"Called `square' for the 1-th time."

36

36

"Called `square' for the 2-th time."

25
#+end_example

Memoize is used by some utility functions.

#+BEGIN_SRC emacs-lisp
(use-package memoize
 :ensure t)
#+END_SRC

** Recompile everything

#+BEGIN_SRC emacs-lisp
(defun pfp-recompile-user-dir ()
 "Recompile everything in the `package-user-dir'."
 (interactive)
 (byte-recompile-directory package-user-dir nil 'force))
#+END_SRC

** Check whether a certain command exists

#+BEGIN_SRC emacs-lisp
(defmemoize pfp-command-exists-p (command)
  "Checks whether COMMAND exists on this system.

The existence of COMMAND is checked using =which COMMAND=. So this function
will only work on systems where the command =which= exists."
  (let ((buf    (get-buffer-create "command-exists-buffer"))
        (retval nil))
    (setq retval (shell-command (format "which '%s'" command)))
    (kill-buffer buf)
    (eq retval 0)))
#+END_SRC

* Install =restart-emacs=

#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
 :ensure t
 :defer t)
#+END_SRC

* Navigation
** Install =counsel ivy and swiper=

See: [[https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html]]

Configuration from: [[https://github.com/abo-abo/swiper]]

Some of these configurations depend on external software:

- =ag=
- =locate= (=mlocate= or =slocate=)
- =rhythmbox=
- =git=

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "%d of %d - ")
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key (kbd "C-S-s") 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    ;; (global-set-key (kbd "M-x") 'counsel-M-x)
    ;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    ;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    ;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    ;; (global-set-key (kbd "<f1> l") 'counsel-find-library)
    ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :after (ivy)
  :config (counsel-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package counsel-tramp
  :ensure t
  :defer t
  :after (counsel))
#+END_SRC

** Install =avy=

#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  ;; :defer t
  :bind (("C-:" . avy-goto-char)
	 ("C-'" . avy-goto-char2)
	 ("M-g f" . avy-goto-line)
	 ("M-g w" . avy-goto-word-1)
	 ("M-g e" . avy-goto-word-0)
	 ("C-c C-j" . avy-resume))
  :config
  (avy-setup-default))
#+END_SRC

** Install =treemacs=

#+BEGIN_SRC emacs-lisp
(use-package treemacs
 :ensure t)
#+END_SRC

* Appearance
** Install =all-the-icons=

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
 :ensure t
 :if (display-graphic-p))
(use-package all-the-icons-dired
 :ensure t
 :after (all-the-icons)
 :if (display-graphic-p)
 :config
 (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
(use-package all-the-icons-ivy
 :ensure t
 :after (all-the-icons ivy)
 :if (display-graphic-p)
 :config
 (all-the-icons-ivy-setup))
#+END_SRC

** Install =doom-themes=

From [[https://github.com/hlissner/emacs-doom-themes]]

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
 :after (treemacs)
 :ensure t
 :config
 ;; Global settings (defaults)
 (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
       doom-themes-enable-italic t) ; if nil, italics is universally disabled
 (load-theme 'doom-nord t)

 ;; Enable flashing mode-line on errors
 (doom-themes-visual-bell-config)

 ;; Enable custom neotree theme (all-the-icons must be installed!)
 ;; (doom-themes-neotree-config)
 ;; or for treemacs users
 (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
 (doom-themes-treemacs-config)

 ;; Corrects (and improves) org-mode's native fontification.
 (doom-themes-org-config))
#+END_SRC

** Install =doom-modeline=

From [[https://github.com/seagle0128/doom-modeline]]

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
 :ensure t
 :init (doom-modeline-mode 1))
#+END_SRC

* Version Control
** Git
*** Install =magit=
#+BEGIN_SRC emacs-lisp
(use-package magit
 :ensure t
 :if (pfp-command-exists-p 'git)
 :defer t)
#+END_SRC

* Terminals
** Install vterm

#+BEGIN_SRC emacs-lisp
(use-package vterm
 :ensure t
 :defer t)
#+END_SRC

* Org-mode
** =htmlize=

#+BEGIN_SRC emacs-lisp
(use-package htmlize
 :ensure t
 :defer t)
#+END_SRC

* EXWM
** Install =exwm=

#+BEGIN_SRC emacs-lisp
(use-package exwm
 :ensure t
 :config
 (progn
  ;; Turn on `display-time-mode' if you don't use an external bar.
  (setq display-time-default-load-average nil)
  (display-time-mode t)

  ;; You are strongly encouraged to enable something like `ido-mode' to alter
  ;; the default behavior of 'C-x b', or you will take great pains to switch
  ;; to or back from a floating frame (remember 'C-x 5 o' if you refuse this
  ;; proposal however).
  ;; You may also want to call `exwm-config-ido' later (see below).
  ;; (ido-mode 1)

  ;;;; Below are configurations for EXWM.

  ;; Add paths (not required if EXWM is installed from GNU ELPA).
  ;(add-to-list 'load-path "/path/to/xelb/")
  ;(add-to-list 'load-path "/path/to/exwm/")

  ;; Load EXWM.
  (require 'exwm)

  ;; Fix problems with Ido (if you use it).
  (require 'exwm-config)
  ;; (exwm-config-ido)

  ;; Set the initial number of workspaces (they can also be created later).
  (setq exwm-workspace-number 4)

  ;; All buffers created in EXWM mode are named "*EXWM*". You may want to
  ;; change it in `exwm-update-class-hook' and `exwm-update-title-hook', which
  ;; are run when a new X window class name or title is available.  Here's
  ;; some advice on this topic:
  ;; + Always use `exwm-workspace-rename-buffer' to avoid naming conflict.
  ;; + For applications with multiple windows (e.g. GIMP), the class names of
  ;;   all windows are probably the same.  Using window titles for them makes
  ;;   more sense.
  ;; In the following example, we use class names for all windows expect for
  ;; Java applications and GIMP.
  (add-hook 'exwm-update-class-hook
            (lambda ()
              (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                          (string= "gimp" exwm-instance-name))
                (exwm-workspace-rename-buffer exwm-class-name))))
  (add-hook 'exwm-update-title-hook
            (lambda ()
              (when (or (not exwm-instance-name)
                        (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                        (string= "gimp" exwm-instance-name))
                (exwm-workspace-rename-buffer exwm-title))))

  ;; Global keybindings can be defined with `exwm-input-global-keys'.
  ;; Here are a few examples:
  (setq exwm-input-global-keys
        `(
          ;; Bind "s-r" to exit char-mode and fullscreen mode.
          ([?\s-r] . exwm-reset)
          ;; Bind "s-w" to switch workspace interactively.
          ([?\s-w] . exwm-workspace-switch)
          ;; Bind "s-0" to "s-9" to switch to a workspace by its index.
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))
          ;; Bind "s-&" to launch applications ('M-&' also works if the output
          ;; buffer does not bother you).
          ([?\s-&] . (lambda (command)
    	           (interactive (list (read-shell-command "$ ")))
    	           (start-process-shell-command command nil command)))
          ;; Bind "s-<f2>" to "slock", a simple X display locker.
          ([s-f2] . (lambda ()
    	          (interactive)
    	          (start-process "" nil "/usr/bin/slock")))))

  ;; To add a key binding only available in line-mode, simply define it in
  ;; `exwm-mode-map'.  The following example shortens 'C-c q' to 'C-q'.
  (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

  ;; The following example demonstrates how to use simulation keys to mimic
  ;; the behavior of Emacs.  The value of `exwm-input-simulation-keys' is a
  ;; list of cons cells (SRC . DEST), where SRC is the key sequence you press
  ;; and DEST is what EXWM actually sends to application.  Note that both SRC
  ;; and DEST should be key sequences (vector or string).
  (setq exwm-input-simulation-keys
        '(
          ;; movement
          ([?\C-b] . [left])
          ([?\M-b] . [C-left])
          ([?\C-f] . [right])
          ([?\M-f] . [C-right])
          ([?\C-p] . [up])
          ([?\C-n] . [down])
          ([?\C-a] . [home])
          ([?\C-e] . [end])
          ([?\M-v] . [prior])
          ([?\C-v] . [next])
          ([?\C-d] . [delete])
          ([?\C-k] . [S-end delete])
          ;; cut/paste.
          ([?\C-w] . [?\C-x])
          ([?\M-w] . [?\C-c])
          ([?\C-y] . [?\C-v])
          ;; search
          ([?\C-s] . [?\C-f])))

  ;; You can hide the minibuffer and echo area when they're not used, by
  ;; uncommenting the following line.
  ;; (setq exwm-workspace-minibuffer-position 'bottom)

  ;; RandR
  (require 'exwm-randr)
  (exwm-randr-enable)

  ;; System tray
  (require 'exwm-systemtray)
  (exwm-systemtray-enable)))
#+END_SRC

* End

#+BEGIN_SRC emacs-lisp
(provide 'pfp)
;;; pfp ends here
#+END_SRC
