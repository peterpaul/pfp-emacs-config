* PFP Emacs Configuration

This is my literate Emacs configuration. All my Emacs configuration is embedded in this file as Emacs Lisp code blocks. To bootstrap this solution, my "regular" =init.el= file contains just a single line:

#+BEGIN_SRC elisp
(org-babel-load-file "~/.emacs.d/README.org")
#+END_SRC

The function =org-babel-load-file= extracts all Emacs Lisp code blocks into the file =README.el= and loads it.

The advantage of this approach is that the whole configuration becomes an =org-mode= document, and the outline mode makes navigating the configuration easy.

* Initialize configuration

In this section we will initialize the Emacs configuration. We will optimize startup time, customize some global settings, initialize the package system and install =use-package=.

** Use lexical binding

Configure the configuration file for lexical binding, as opposed to dynamic binding. Lexical binding is the behaviour that most developers actually expect.

#+BEGIN_SRC emacs-lisp
;;; init -*- lexical-binding: t; -*-
#+END_SRC

** Upon startup, write message with startup details

Install a startup hook that informs the user of the startup duration and the number of garbage collections.

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
 (lambda ()
  (message "Emacs ready in %s with %d garbage collections."
   (format "%.2f seconds"
    (float-time
     (time-subtract after-init-time before-init-time)))
   gcs-done)))
#+END_SRC

** Temporarily change garbage collection settings, and disable file-name-handler

In order to optimize the startup time we will change the garbage collection settings during startup and restore the original settings after startup is done.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 64 1024 1024))
(let ((gc-cons-threshold-backup gc-cons-threshold)
      (gc-cons-percentage-backup gc-cons-percentage)
      file-name-handler-alist-backup file-name-handler-alist)
  ;; Change garbage collector settings and file-name-handler
  (setq gc-cons-threshold 402653184
	gc-cons-percentage 0.6
	file-name-handler-alist nil)
  ;; Then restore it as late as possible
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "Restored original settings")
	      (setq gc-cons-threshold gc-cons-threshold-backup
		    gc-cons-percentage gc-cons-percentage-backup
		    file-name-handler-alist (append file-name-handler-alist-backup file-name-handler-alist)))))
#+END_SRC

** Standard UI tweaks

#+BEGIN_SRC emacs-lisp
(display-battery-mode 1)
(display-time-mode 1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(show-paren-mode 1)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

** Enable linum for programming modes

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'linum-mode)
#+END_SRC

** Configure =custom-file=

Do not use =init.el= for =custom-*= code - use =custom.el=.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC

Assuming that the code in custom-file is executed before the code ahead of this line is not a safe assumption. So load this file proactively.

#+BEGIN_SRC emacs-lisp
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

** Require and initialize =package=

#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
#+END_SRC

*** Add =melpa= to =package-archives=

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archive-priorities '("melpa" . 10) t)
#+END_SRC

** Install =use-package=

#+BEGIN_SRC emacs-lisp
(when (not (package-installed-p 'use-package))
 (package-refresh-contents)
 (package-install 'use-package))
#+END_SRC

** Install =quelpa= to install packages directly from github

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'quelpa)
    (with-temp-buffer
      (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
      (eval-buffer)
      (quelpa-self-upgrade)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package quelpa-use-package
  :ensure t)
#+END_SRC

** Install =esup= startup profiler

#+BEGIN_SRC emacs-lisp
(use-package esup
  :ensure t
  :commands (esup))
#+END_SRC

* Utility functions
** Install =memoize=

=memoize= is a great library that can memoize functions.

For example the following code produces the output below.

#+BEGIN_SRC elisp :results output session :exports both
(defvar square-times-called 0)
(defmemoize-by-buffer-contents square (x)
  (setq square-times-called (+ square-times-called 1))
  (print (format "Called `square' for the %d-th time." square-times-called))
  (* x x))

(print (square 6))
(print (square 6))
(print (square 5))
#+END_SRC

#+RESULTS:
#+begin_example

"Called `square' for the 1-th time."

36

36

"Called `square' for the 2-th time."

25
#+end_example

Memoize is used by some utility functions.

#+BEGIN_SRC emacs-lisp
(use-package memoize
 :ensure t)
#+END_SRC

** =init-recompile-user-dir=

#+BEGIN_SRC emacs-lisp
(defun init-recompile-user-dir ()
 "Recompile everything in the `package-user-dir'."
 (interactive)
 (byte-recompile-directory package-user-dir nil 'force))
#+END_SRC

** =init-command-exists-p=

#+BEGIN_SRC emacs-lisp
(unless (fboundp 'init-command-exists-p)
  (defmemoize init-command-exists-p (command)
  "Checks whether COMMAND exists on this system.

The existence of COMMAND is checked using =which COMMAND=. So this function
will only work on systems where the command =which= exists."
    (let ((buf    (get-buffer-create "command-exists-buffer"))
          (retval nil))
      (setq retval (shell-command (format "which '%s'" command)))
      (kill-buffer buf)
      (eq retval 0))))
#+END_SRC

* Look and Feel
** Install =all-the-icons=

To use =all-the-icons=, one must run =M-x all-the-icons-install-fonts=.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
 :ensure t
 :if (display-graphic-p))
#+END_SRC

** Install =doom-themes=

From [[https://github.com/hlissner/emacs-doom-themes]]

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
 :after (treemacs)
 :ensure t
 :config
 ;; Global settings (defaults)
 (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
       doom-themes-enable-italic t) ; if nil, italics is universally disabled
 (load-theme 'doom-nord t)

 ;; Enable flashing mode-line on errors
 (doom-themes-visual-bell-config)

 ;; Enable custom neotree theme (all-the-icons must be installed!)
 ;; (doom-themes-neotree-config)
 ;; or for treemacs users
 (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
 (doom-themes-treemacs-config)

 ;; Corrects (and improves) org-mode's native fontification.
 (doom-themes-org-config))
#+END_SRC

** Install =doom-modeline=

From [[https://github.com/seagle0128/doom-modeline]]

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
 :ensure t
 :init (doom-modeline-mode 1))
#+END_SRC

** Install =minimap=

#+BEGIN_SRC emacs-lisp
  ;; Minimap
  (use-package minimap
    :ensure t
    :if (display-graphic-p)
    :config
    (global-set-key [f9] 'minimap-mode)
    :init
    (setq minimap-window-location 'right)
    :custom-face
    (minimap-active-region-background ((t (:background "#4C566A"))))
    (minimap-current-line-face ((t (:background "#88C0D0" :foreground "#2E3440")))))
#+END_SRC

** Install =beacon=

Shortly highlights the cursor position when switching buffers.

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :config (beacon-mode 1))
#+END_SRC

* Emacs user friendlyness
** =discover=

#+BEGIN_SRC emacs-lisp
(use-package discover
 :ensure t)
#+END_SRC

** =discover-my-major=

#+BEGIN_SRC emacs-lisp
(use-package discover-my-major
  :ensure t
  :config
  (progn
    (global-set-key (kbd "C-h C-m") 'discover-my-major)
    (global-set-key (kbd "C-h M-m") 'discover-my-mode)))
#+END_SRC

** =helpful=

#+BEGIN_SRC emacs-lisp
(use-package helpful
  :ensure t
  :config
  (progn
    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    (global-set-key (kbd "C-h f") #'helpful-callable)

    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    ;; Lookup the current symbol at point. C-c C-d is a common keybinding
    ;; for this in lisp modes.
    (global-set-key (kbd "C-c C-d") #'helpful-at-point)

    ;; Look up *F*unctions (excludes macros).
    ;;
    ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
    ;; already links to the manual, if a function is referenced there.
    (global-set-key (kbd "C-h F") #'helpful-function)

    ;; Look up *C*ommands.
    ;;
    ;; By default, C-h C is bound to describe `describe-coding-system'. I
    ;; don't find this very useful, but it's frequently useful to only
    ;; look at interactive functions.
    (global-set-key (kbd "C-h C") #'helpful-command)))
#+END_SRC


** Install =restart-emacs=

#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
 :ensure t
 :defer t)
#+END_SRC

* Navigation
** Configure Windmove

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-<left>") 'windmove-left)
(global-set-key (kbd "s-<right>") 'windmove-right)
(global-set-key (kbd "s-<up>") 'windmove-up)
(global-set-key (kbd "s-<down>") 'windmove-down)
#+END_SRC

** Install =counsel ivy and swiper=

See: [[https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html]]

Configuration from: [[https://github.com/abo-abo/swiper]]

Some of these configurations depend on external software:

- =ag=
- =locate= (=mlocate= or =slocate=)
- =rhythmbox=
- =git=

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "%d of %d - ")
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key (kbd "C-S-s") 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    ;; (global-set-key (kbd "M-x") 'counsel-M-x)
    ;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    ;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    ;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    ;; (global-set-key (kbd "<f1> l") 'counsel-find-library)
    ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy-hydra
  :ensure t
  :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :after (ivy)
  :config (counsel-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package counsel-tramp
  :ensure t
  :defer t
  :after (counsel))
#+END_SRC

*** Show icons in ivy

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-ivy
 :ensure t
 :after (all-the-icons ivy)
 :if (display-graphic-p)
 :config
 (all-the-icons-ivy-setup))
#+END_SRC

** Install =avy=

#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  ;; :defer t
  :bind (("C-:" . avy-goto-char)
	 ("C-'" . avy-goto-char2)
	 ("M-g f" . avy-goto-line)
	 ("M-g w" . avy-goto-word-1)
	 ("M-g e" . avy-goto-word-0)
	 ("C-c C-j" . avy-resume))
  :config
  (avy-setup-default))
#+END_SRC

* Editing
** =multiple-cursors=

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :defer t
  :config
  (progn
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    ))
#+END_SRC

*** TODO after startup the keybindings above don't work
** =yasnippet=

#+BEGIN_SRC emacs-lisp
(require 'f)
(unless (f-directory? "~/.emacs.d/snippets")
 (mkdir "~/.emacs.d/snippets"))

(use-package yasnippet
  :ensure t
  :config
  (progn
    (yas-load-directory "~/.emacs.d/snippets")
    (yas-global-mode 1)))

(use-package yasnippet-snippets
  :ensure t
  :after (yasnippet))
#+END_SRC
** =string-inflection=

#+BEGIN_SRC emacs-lisp
(use-package string-inflection
  :ensure t
  :config (progn
            (global-set-key (kbd "C-c i") 'string-inflection-cycle)
            (global-set-key (kbd "C-c C") 'string-inflection-camelcase)        ;; Force to CamelCase
            (global-set-key (kbd "C-c L") 'string-inflection-lower-camelcase)  ;; Force to lowerCamelCase
            (global-set-key (kbd "C-c J") 'string-inflection-java-style-cycle) ;; Cycle through Java styles
            ))
#+END_SRC
** =editorconfig=

#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+END_SRC
** Code completion with =company=

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config (add-hook 'after-init-hook 'global-company-mode))

(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode))

(use-package company-quickhelp
  :ensure t
  :after (company)
  :config (progn (company-quickhelp-mode 1)
                 (with-eval-after-load 'company-mode
                   (define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin))))

(use-package company-web
  :ensure t)
#+END_SRC
** Syntax checking with =flycheck=

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :hook (prog-mode . flycheck-mode)
  :config
  (progn
    (setq flycheck-check-syntax-automatically '(save new-line))))
#+END_SRC
*** Syntax checking of packages

#+BEGIN_SRC emacs-lisp
(use-package flycheck-package
  :ensure t
  :after (flycheck))
#+END_SRC
** Very large file support

#+BEGIN_SRC emacs-lisp
(use-package vlf
  :ensure t
  :config
  (require 'vlf-setup))
#+END_SRC
** =expand-region=

#+BEGIN_SRC emacs-lisp
(use-package expand-region
 :ensure t)
#+END_SRC
** =iedit=

#+BEGIN_SRC emacs-lisp
(use-package iedit
 :ensure t)
#+END_SRC
** Move lines

#+BEGIN_SRC emacs-lisp
(defmacro init-save-column (&rest body)
  `(let ((column (current-column)))
     (unwind-protect
         (progn ,@body)
       (move-to-column column))))
(put 'init-save-column 'lisp-indent-function 0)

(defun init-move-line-up ()
  (interactive)
  (init-save-column
    (transpose-lines 1)
    (forward-line -2)))

(defun init-move-line-down ()
  (interactive)
  (init-save-column
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)))

(global-set-key (kbd "M-<up>") 'init-move-line-up)
(global-set-key (kbd "M-<down>") 'init-move-line-down)
#+END_SRC

* System utilities and tools
** Silver searcher

#+BEGIN_SRC emacs-lisp
(use-package ag
  :ensure t
  :if (init-command-exists-p 'ag))
#+END_SRC

** Ripgrep

#+BEGIN_SRC emacs-lisp
(use-package ripgrep
  :ensure t
  :if (init-command-exists-p 'rg))
(use-package rg
  :ensure t
  :if (init-command-exists-p 'rg))
#+END_SRC

*** TODO Investigate whether both are needed

** Lastpass

#+BEGIN_SRC emacs-lisp
(use-package lastpass
  :ensure
  :if (init-command-exists-p 'lpass))
(use-package lpass
  :if (init-command-exists-p 'lpass)
  :quelpa
  (lpass
    :fetcher github
    :repo "peterpaul/lpass"))
#+END_SRC

** Gnuplot

#+BEGIN_SRC emacs-lisp
(use-package gnuplot
  :ensure t
  :if (init-command-exists-p 'gnuplot)
  :config
  (progn
    ;; these lines enable the use of gnuplot mode
    (autoload 'gnuplot-mode "gnuplot" "gnuplot major mode" t)
    (autoload 'gnuplot-make-buffer "gnuplot" "open a buffer in gnuplot mode" t)

    ;; this line automatically causes all files with the .gp extension to be loaded into gnuplot mode
    (setq auto-mode-alist (append '(("\\.gp$" . gnuplot-mode)) auto-mode-alist))

    ;; This line binds the function-9 key so that it opens a buffer into gnuplot mode
    ;; (global-set-key [(f9)] 'gnuplot-make-buffer)
    ))
#+END_SRC

** Docker

#+BEGIN_SRC emacs-lisp
(use-package docker
  :ensure t
  :if (init-command-exists-p 'docker)
  :bind ("C-c d" . docker))
#+END_SRC

** Vagrant

#+BEGIN_SRC emacs-lisp
(use-package vagrant
  :ensure t
  :if (init-command-exists-p 'vagrant))
#+END_SRC

** Ansible

#+BEGIN_SRC emacs-lisp
(use-package ansible
  :ensure t
  :if (init-command-exists-p 'ansible)
  :config
  (progn
    (add-to-list 'auto-mode-alist '(".*inventory.*/group_vars/.*\\'" . yaml-mode))
    (add-to-list 'auto-mode-alist '(".*inventory.*/host_vars/.*\\'" . yaml-mode))
    ))
(use-package ansible-doc
  :ensure t
  :if (init-command-exists-p 'ansible)
  :after (ansible))
(use-package ansible-vault
  :ensure t
  :if (init-command-exists-p 'ansible)
  :after (ansible))
(use-package company-ansible
  :ensure t
  :if (init-command-exists-p 'ansible)
  :after (ansible company))
(use-package ansible-vault-string
  :if (init-command-exists-p 'ansible)
  :quelpa (ansible-vault-string
           :fetcher github
           :repo "peterpaul/ansible-vault-string"))
#+END_SRC

** PlantUML

- Reference Guide: [[http://plantuml.com/PlantUML_Language_Reference_Guide.pdf]]
- Download from: [[https://sourceforge.net/projects/plantuml/files/plantuml.jar/download]]

#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
  :ensure t
  :config
  (progn
    (add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
    (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))))
#+END_SRC
** OpenSSL X.509 Certificate viewer

#+BEGIN_SRC emacs-lisp
(use-package x509-mode
  :ensure t
  :if (init-command-exists-p 'openssl))
(use-package x509-certificate-region
  :ensure t
  :if (init-command-exists-p 'openssl)
  :quelpa (x509-certificate-region
           :fetcher github
           :repo "peterpaul/x509-certificate-region.el")
  :bind (("C-x x c" . x509-view-certificate)
         ("C-x x x" . x509-view-xml-element-as-x509-certificate)
         ("C-x x r" . x509-view-region-as-x509-certificate)
         ("C-x x p" . x509-view-paragraph-as-x509-certificate)))
#+END_SRC

** Keytool

#+BEGIN_SRC emacs-lisp
(use-package keystore-mode
  :ensure t
  :if (init-command-exists-p 'keytool))
#+END_SRC

** Edit server for Chrome and Firefox

[[https://github.com/stsquad/emacs_chrome]]

#+BEGIN_SRC emacs-lisp
(use-package edit-server
  :ensure t
  :commands edit-server-start
  :init (if after-init-time
            (edit-server-start)
          (add-hook 'after-init-hook
                    #'(lambda () (edit-server-start))))
  :config (progn
            (setq edit-server-new-frame nil)
            (setq edit-server-new-frame-alist
                  '((name . "Edit with Emacs FRAME")
                    (top . 200)
                    (left . 200)
                    (width . 80)
                    (height . 25)
                    (minibuffer . t)
                    (menu-bar-lines . t)
                    (window-system . x)))))
#+END_SRC

** =system-packages=

#+BEGIN_SRC emacs-lisp
(use-package system-packages
 :ensure t)
#+END_SRC

** Slack

#+BEGIN_SRC emacs-lisp
(use-package slack
  :ensure t
  :commands (slack-start)
  :init
  (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
  (setq slack-prefer-current-team t)
  :config
  (let ((file "~/.emacs.d/slack-teams.el"))
  (if (f-exists? file)
	(load file)
    (progn
      (f-touch file)
      (f-write ";;; slack-teams.el --- Slack team configuration -*- lexical-binding: t; -*-
;;; Commentary:
;; Register your slack teams in the Code section, using `slack-register-team'.

;;; Code:

(provide 'slack-teams)
;;; slack-teams.el ends here" 'utf-8 file)))))

(use-package alert
  :ensure t
  :commands (alert)
  :init
  (setq alert-default-style 'notifier))
#+END_SRC

** Network Manager

#+BEGIN_SRC emacs-lisp
(require 'seq)
(defun init-nm-get-connections ()
  "Get a list of all NetworkManager connections."
  (seq-filter
   (lambda (x) (not (string-blank-p x)))
   (split-string
    (shell-command-to-string "nmcli -o -m multiline -t -f name connection | cut -d':' -f2")
    "\n")))

(defun init-nm-up (connection)
  "Bring NetworkManager CONNECTION up."
  (interactive (list (completing-read "Connection: " (init-nm-get-connections))))
  (async-shell-command (format "nmcli con up id %s" connection)))
#+END_SRC

* File management
** Colorize =dired= with =diredfl=

#+BEGIN_SRC emacs-lisp
(use-package diredfl
  :ensure t
  :config
  (diredfl-global-mode))
#+END_SRC
** Show icons in =dired= with =all-the-icons-dired=

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
 :ensure t
 :after (all-the-icons)
 :if (display-graphic-p)
 :config
 (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

** Install =treemacs=

#+BEGIN_SRC emacs-lisp
(use-package treemacs
 :ensure t
 :config (global-set-key [f8] 'treemacs))
#+END_SRC
** Sunrise commander

#+BEGIN_SRC emacs-lisp
(use-package sunrise-commander
  :quelpa (sunrise-commander :fetcher github :repo "escherdragon/sunrise-commander")
  :config
  (when (display-graphic-p)
    (require 'sunrise-x-buttons)
    (require 'sunrise-x-modeline)))
#+END_SRC

* Version Control
** Install =diff-hl=

[[https://github.com/dgutov/diff-hl][diff-hl-mode]] highlights uncommitted changes on the left size of the window.

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :ensure t
  :after (magit)
  :config
  (progn
   (global-diff-hl-mode)
   ;; (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
   (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)))
#+END_SRC

** Git
*** Install =magit=

#+BEGIN_SRC emacs-lisp
(use-package magit
 :ensure t
 :if (init-command-exists-p 'git)
 :defer t)
#+END_SRC

*** Install =forge=

#+BEGIN_SRC emacs-lisp
(use-package forge
  :ensure t
  :if (init-command-exists-p 'git)
  :after (magit))
#+END_SRC

** Mercurial

*** Install =monky=

#+BEGIN_SRC emacs-lisp
(use-package monky
  :ensure t
  :if (init-command-exists-p 'hg)
  :defer t)
#+END_SRC

* Project management
** =projectile=

#+BEGIN_SRC emacs-lisp
(use-package projectile
 :ensure t
 :defer t)
(use-package projectile-ripgrep
  :ensure t
  :defer t
  :after (projectile)
  :if (init-command-exists-p 'rg))
(use-package term-projectile
 :ensure t
 :defer t)
(use-package treemacs-projectile
  :ensure t
  :defer t
  :after (treemacs projectile))
#+END_SRC

* Terminals
** Install =vterm=

#+BEGIN_SRC emacs-lisp
(use-package vterm
 :ensure t
 :defer t
 :init
 (progn
  (setq vterm-always-compile-module t)
  (when (init-command-exists-p 'fish)
    (setq vterm-shell "/usr/bin/fish"))))
#+END_SRC

** =eshell= customization

#+BEGIN_SRC emacs-lisp
(use-package eshell-git-prompt
  :ensure t
  :config
  (eshell-git-prompt-use-theme 'powerline))
#+END_SRC
** Multi terminal emulation

#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :ensure t
  :bind (("<f5>" . 'multi-term)
         ("<C-next>" . 'multi-term-next)
         ("<C-prior>" . 'multi-term-prev))
  :custom
  (multi-term-buffer-name "term"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package xterm-color
  :if nil
  :config
  (progn
    (setq comint-output-filter-functions
          (remove 'ansi-color-process-output comint-output-filter-functions))

    (add-hook 'shell-mode-hook
              (lambda () (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t)))

    ;; Also set TERM accordingly (xterm-256color)

    ;; You can also use it with eshell (and thus get color output from system ls):

    (require 'eshell)

    (add-hook 'eshell-before-prompt-hook
              (lambda ()
                (setq xterm-color-preserve-properties t)))

    (add-to-list 'eshell-preoutput-filter-functions #'xterm-color-filter)
    (setq eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))

    ;;  Don't forget to setenv TERM xterm-256color
    ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ansi-color
  :ensure t
  :config
  (progn
    (defun init-colorize-compilation-buffer ()
      (ansi-color-apply-on-region compilation-filter-start (point-max)))
    (add-hook 'compilation-filter-hook 'init-colorize-compilation-buffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package eterm-256color
  :ensure t
  :hook (term-mode . eterm-256color-mode))
#+END_SRC

** Bash completion

#+BEGIN_SRC emacs-lisp
(use-package bash-completion
  :ensure t
  :config
  (bash-completion-setup))
#+END_SRC

* Web

** =restclient=

#+BEGIN_SRC emacs-lisp
(use-package restclient
 :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package company-restclient
  :ensure t
  :after restclient
  :config (progn
            (add-to-list 'company-backend 'company-restclient)
            (add-hook 'restclient-mode-hook #'company-mode-on)))
#+END_SRC

* File type
** =csv-mode=

#+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :ensure t
  :config
  (progn
    (add-to-list 'auto-mode-alist '("\\.[Cc][Ss][Vv]\\'" . csv-mode))
    ))
#+END_SRC
** =yaml-mode=

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
 :ensure t)
#+END_SRC
** =json-mode=

#+BEGIN_SRC emacs-lisp
(use-package json-mode
 :ensure t)
#+END_SRC
** log files

#+BEGIN_SRC emacs-lisp
(use-package logview
 :ensure t)
#+END_SRC

* Markup languages
** Org-mode
*** Org Babel Restclient

#+BEGIN_SRC emacs-lisp
(use-package ob-restclient
  :ensure t
  :config
  (add-to-list 'org-babel-load-languages `(restclient . t)))
#+END_SRC

*** =htmlize=

 #+BEGIN_SRC emacs-lisp
 (use-package htmlize
  :ensure t
  :defer t)
 #+END_SRC
*** =org-bullets=

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :after (org)
  :commands (org-bullets-mode)
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
*** =org-preview-html=

#+BEGIN_SRC emacs-lisp
(use-package org-preview-html
  :ensure t
  :after (org))
#+END_SRC

*** =org-brain= DISABLED

#+BEGIN_SRC emacs-lisp
(use-package org-brain
  :disabled
  :after (org)
  :init
  (setq org-brain-path "~/Documents/brain")
  ;; For Evil users
  ;; (with-eval-after-load 'evil
  ;;   (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
  :config
  (setq org-id-track-globally t)
  (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
  ;; (push '("b" "Brain" plain (function org-brain-goto-end)
  ;;         "* %i%?" :empty-lines 1)
  ;;       org-capture-templates)
  (setq org-brain-visualize-default-choices 'all)
  (setq org-brain-title-max-length 12))
#+END_SRC

*** Present

#+BEGIN_SRC emacs-lisp
(use-package epresent
  :ensure t
  :after (org))

(use-package org-present
  :ensure t
  :after (org)
  :config
  (eval-after-load "org-present"
    '(progn
       (add-hook 'org-present-mode-hook
                 (lambda ()
                   (org-present-big)
                   (org-display-inline-images)
                   (org-present-hide-cursor)
                   (org-present-read-only)))
       (add-hook 'org-present-mode-quit-hook
                 (lambda ()
                   (org-present-small)
                   (org-remove-inline-images)
                   (org-present-show-cursor)
                   (org-present-read-write))))))
#+END_SRC


** Markdown

 #+BEGIN_SRC emacs-lisp
 (use-package markdown-mode
  :ensure t)

 (defun init-markdown-backward-inner-block ()
   "Navigate back to the beginning of this block."
   (markdown-backward-block)
   (forward-line))

 (defun init-markdown-forward-inner-block ()
   "Navigate forward to the end of this block."
   (markdown-forward-block)
   (forward-line -1))

 (defun init-markdown-narrow-inner-block ()
   "Make text inside current block visible.
 The current block is the one that contains point or follows point."
   (interactive)
   (let ((beginning-of-defun-function 'init-markdown-backward-inner-block)
         (end-of-defun-function 'init-markdown-forward-inner-block))
     (narrow-to-defun)))
 #+END_SRC

*** preview mode

#+BEGIN_SRC emacs-lisp
(use-package markdown-preview-mode
 :ensure t
 :defer t)
#+END_SRC

*** table of contents

#+BEGIN_SRC emacs-lisp
(use-package markdown-toc
 :ensure t
 :defer t)
#+END_SRC

* Programming
** Emacs Lisp

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
 :ensure t)
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
(use-package highlight-defined
  :ensure t
  :config
  (add-hook 'emacs-lisp-mode-hook 'highlight-defined-mode))
(use-package smartparens
  :ensure t
  :config
  (require 'smartparens-config))
#+END_SRC

*** Custom functions

**** Comment next Sexp

#+BEGIN_SRC emacs-lisp
(defun init-comment-next-sexp (&optional ARG)
  "Comment the next sexp.
With ARG, comment the next ARG sexps.
Negative ARG means comment backwards across N sexps.
This command assumes point is not in a string or comment."
  (interactive)
  (let ((beg (point)))
    (forward-list ARG)
    (unless (eolp)
      (electric-newline-and-maybe-indent))
    (comment-region beg (point))
    (indent-for-tab-command)))
#+END_SRC

** =lsp-mode=

Installation copied from: [[https://emacs-lsp.github.io/lsp-mode/page/installation/]]

#+BEGIN_SRC emacs-lisp
;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
(setq lsp-keymap-prefix "s-l")

(use-package lsp-mode
    :ensure t
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
            ;; (XXX-mode . lsp)
            ;; (XXX-mode . lsp-deferred) ;; to defer LSP server startup
            ;; if you want which-key integration
	    (rust-mode . lsp-deferred)
            (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp lsp-deferred
    :config (progn
              (setq read-process-output-max (* 1024 1024)) ;; 1mb
            ))

;; optionally
(use-package lsp-ui
 :ensure t
 :commands lsp-ui-mode)
;; if you are helm user
;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
(use-package lsp-ivy
 :ensure t
 :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs
 :ensure t
 :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
(use-package dap-mode
 :ensure t)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language

;; optional if you want which-key integration
(use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

** Cucumber =feature-mode=

Install [[https://github.com/michaelklishin/cucumber.el][=feature-mode=]] to edit plain text user stories.

#+BEGIN_SRC emacs-lisp
(use-package feature-mode
 :ensure t)
#+END_SRC

** Javascript

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :config
  (progn
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)))

(use-package typescript-mode
  :ensure t)

(use-package tide
  :ensure t
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (before-save . tide-format-before-save)))

(use-package ts-comint
  :ensure t)
#+END_SRC
** Angular

#+BEGIN_SRC emacs-lisp
(use-package ng2-mode
  :ensure t
  :config (with-eval-after-load 'typescript-mode (add-hook 'typescript-mode-hook #'lsp)))
#+END_SRC

#+BEGIN_SRC shell
npm install -g @angular/language-service@next typescript  @angular/language-server
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq lsp-clients-angular-language-server-command
  '("node"
    "/usr/lib/node_modules/@angular/language-server"
    "--ngProbeLocations"
    "/usr/lib/node_modules"
    "--tsProbeLocations"
    "/usr/lib/node_modules"
    "--stdio"))
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t
  :defer t
  :if (init-command-exists-p 'cargo))

(use-package cargo
  :ensure t
  :defer t
  :if (init-command-exists-p 'cargo)
  :hook (rust-mode . cargo-minor-mode))

(use-package flycheck-rust
  :ensure t
  :defer t
  :if (init-command-exists-p 'cargo)
  :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

(use-package toml-mode
  :ensure t
  :defer t
  :if (init-command-exists-p 'cargo))
#+END_SRC

** Java

Nice package to automatically disassemble java .class files

#+BEGIN_SRC emacs-lisp
(use-package autodisass-java-bytecode
  :ensure t
  :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package lsp-java
  :if (init-command-exists-p 'javac)
  :after (lsp-mode)
  :defer 3
  :init
  (progn
    (require 'lsp-ui-flycheck)
    (require 'lsp-ui-sideline)
    (add-hook 'java-mode-hook #'lsp)
    (add-hook 'java-mode-hook #'flycheck-mode)
    (add-hook 'java-mode-hook #'company-mode)
    (add-hook 'java-mode-hook (lambda () (lsp-ui-flycheck-enable t)))
    (add-hook 'java-mode-hook #'lsp-ui-sideline-mode)))

(use-package java-snippets
  :ensure t
  :if (init-command-exists-p 'javac)
  :after (yasnippet)
  :init (add-hook 'java-mode-hook #'yas-minor-mode))

;; (use-package dap-java :after (lsp-java))
;; (use-package lsp-java-treemacs :after (treemacs))
#+END_SRC

** Kotlin

#+BEGIN_SRC emacs-lisp
(use-package kotlin-mode
  :ensure t)
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :if (init-command-exists-p 'stack))

(use-package haskell-emacs
  :if (init-command-exists-p 'stack))

(use-package intero
  :if (init-command-exists-p 'stack)
  :config
  (add-hook 'haskell-mode-hook 'intero-mode))
#+END_SRC

* EXWM Window Manager
** Install =exwm=

#+BEGIN_SRC emacs-lisp
(use-package exwm
 :ensure t
 :if (display-graphic-p)
 :config
 (progn
  ;; Turn on `display-time-mode' if you don't use an external bar.
  (setq display-time-default-load-average nil)
  (display-time-mode t)

  ;; You are strongly encouraged to enable something like `ido-mode' to alter
  ;; the default behavior of 'C-x b', or you will take great pains to switch
  ;; to or back from a floating frame (remember 'C-x 5 o' if you refuse this
  ;; proposal however).
  ;; You may also want to call `exwm-config-ido' later (see below).
  ;; (ido-mode 1)

  ;;;; Below are configurations for EXWM.

  ;; Add paths (not required if EXWM is installed from GNU ELPA).
  ;(add-to-list 'load-path "/path/to/xelb/")
  ;(add-to-list 'load-path "/path/to/exwm/")

  ;; Load EXWM.
  (require 'exwm)

  ;; Fix problems with Ido (if you use it).
  (require 'exwm-config)
  ;; (exwm-config-ido)

  ;; Set the initial number of workspaces (they can also be created later).
  (setq exwm-workspace-number 4)

  ;; All buffers created in EXWM mode are named "*EXWM*". You may want to
  ;; change it in `exwm-update-class-hook' and `exwm-update-title-hook', which
  ;; are run when a new X window class name or title is available.  Here's
  ;; some advice on this topic:
  ;; + Always use `exwm-workspace-rename-buffer' to avoid naming conflict.
  ;; + For applications with multiple windows (e.g. GIMP), the class names of
  ;;   all windows are probably the same.  Using window titles for them makes
  ;;   more sense.
  ;; In the following example, we use class names for all windows expect for
  ;; Java applications and GIMP.
  (add-hook 'exwm-update-class-hook
            (lambda ()
              (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                          (string= "gimp" exwm-instance-name))
                (exwm-workspace-rename-buffer exwm-class-name))))
  (add-hook 'exwm-update-title-hook
            (lambda ()
              (when (or (not exwm-instance-name)
                        (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                        (string= "gimp" exwm-instance-name))
                (exwm-workspace-rename-buffer exwm-title))))

  ;; Global keybindings can be defined with `exwm-input-global-keys'.
  ;; Here are a few examples:
  (setq exwm-input-global-keys
        `(
          ;; Bind "s-r" to exit char-mode and fullscreen mode.
          ([?\s-r] . exwm-reset)
          ;; Bind "s-w" to switch workspace interactively.
          ([?\s-w] . exwm-workspace-switch)
          ;; Bind "s-0" to "s-9" to switch to a workspace by its index.
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))
          ;; Bind "s-&" to launch applications ('M-&' also works if the output
          ;; buffer does not bother you).
          ([?\s-&] . (lambda (command)
    	           (interactive (list (read-shell-command "$ ")))
    	           (start-process-shell-command command nil command)))
          ;; Bind "s-<f2>" to "slock", a simple X display locker.
          ([s-f2] . (lambda ()
    	          (interactive)
    	          (start-process "" nil "/usr/bin/slock")))))

  ;; To add a key binding only available in line-mode, simply define it in
  ;; `exwm-mode-map'.  The following example shortens 'C-c q' to 'C-q'.
  (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

  ;; The following example demonstrates how to use simulation keys to mimic
  ;; the behavior of Emacs.  The value of `exwm-input-simulation-keys' is a
  ;; list of cons cells (SRC . DEST), where SRC is the key sequence you press
  ;; and DEST is what EXWM actually sends to application.  Note that both SRC
  ;; and DEST should be key sequences (vector or string).
  (setq exwm-input-simulation-keys
        '(
          ;; movement
          ([?\C-b] . [left])
          ([?\M-b] . [C-left])
          ([?\C-f] . [right])
          ([?\M-f] . [C-right])
          ([?\C-p] . [up])
          ([?\C-n] . [down])
          ([?\C-a] . [home])
          ([?\C-e] . [end])
          ([?\M-v] . [prior])
          ([?\C-v] . [next])
          ([?\C-d] . [delete])
          ([?\C-k] . [S-end delete])
          ;; cut/paste.
          ([?\C-w] . [?\C-x])
          ([?\M-w] . [?\C-c])
          ([?\C-y] . [?\C-v])
          ;; search
          ([?\C-s] . [?\C-f])))

  ;; You can hide the minibuffer and echo area when they're not used, by
  ;; uncommenting the following line.
  ;; (setq exwm-workspace-minibuffer-position 'bottom)

  ;; RandR
  (require 'exwm-randr)
  (exwm-randr-enable)

  ;; System tray
  (require 'exwm-systemtray)
  (exwm-systemtray-enable)))
#+END_SRC
** XRandr screen layouts

#+BEGIN_SRC emacs-lisp
(defun init/screenlayout (layout)
  (interactive
   (list
    (completing-read "Select the screenlayout: "
                     (seq-filter (lambda (x) (s-ends-with? ".sh" x)) (directory-files "~/.screenlayout")))))
  (let ((command (format "~/.screenlayout/%s" layout)))
    (message "command: %s" command)
    (start-process-shell-command "bash" nil command)))

(defun init/xrandr-desk-3-window ()
  (interactive)
  (start-process-shell-command "xrandr" nil "--output eDP-1 --mode 1920x1080 --pos 0x0 --rotate normal --output HDMI-2 --mode 1920x1080 --pos 3840x0 --rotate normal --output HDMI-1 --primary --mode 1920x1080 --pos 1920x0 --rotate normal --output DP-3 --off --output DP-2 --off --output DP-1 --off")
  (setq exwm-randr-workspace-monitor-plist '(0 "eDP-1" 1 "HDMI-1" 2 "HDMI-2"))
  (exwm-randr-refresh))

(defun init/xrandr-desk-2-window ()
  (interactive)
  (start-process-shell-command "xrandr" nil "--output eDP-1 --off --output HDMI-2 --mode 1920x1080 --pos 1920x0 --rotate normal --output HDMI-1 --primary --mode 1920x1080 --pos 0x0 --rotate normal --output DP-3 --off --output DP-2 --off --output DP-1 --off")
  (setq exwm-randr-workspace-monitor-plist '(0 "HDMI-1" 1 "HDMI-2"))
  (exwm-randr-refresh))

(defun init/xrandr-desk-home ()
  (interactive)
  (start-process-shell-command "xrandr" nil "--output eDP-1 --mode 1920x1080 --pos 0x0 --rotate normal --output HDMI-1 --primary --mode 1920x1080 --pos 1920x0 --rotate normal --output HDMI-2 --off --output DP-3 --off --output DP-2 --off --output DP-1 --off")
  (setq exwm-randr-workspace-monitor-plist '(0 "eDP-1" 1 "HDMI-1"))
  (exwm-randr-refresh))

(defun init/xrandr-laptop ()
  (interactive)
  (start-process-shell-command "xrandr" nil "--output eDP-1 --primary --mode 1920x1080 --pos 0x0 --rotate normal --output HDMI-2 --off --output HDMI-1 --off --output DP-3 --off --output DP-2 --off --output DP-1 --off")
  (setq exwm-randr-workspace-monitor-plist '(0 "eDP-1"))
  (exwm-randr-refresh))

(defun init/xrandr-attic ()
  (interactive)
  (start-process-shell-command "xrandr" nil "--output eDP-1 --primary --mode 1920x1080 --pos 0x0 --rotate normal --output HDMI-2 --off --output HDMI-1 --off --output DP-3 --off --output DP-2 --off --output DP-1 --off")
  (setq exwm-randr-workspace-monitor-plist '(0 "eDP-1" 1 "DP-3"))
  (exwm-randr-refresh))
#+END_SRC

* Emacs server

Start server if not running

#+BEGIN_SRC emacs-lisp
(load "server")
(unless (server-running-p) (server-start))
#+END_SRC

* Macros

** Pretty print xml

#+BEGIN_SRC emacs-lisp
(fset 'init-macro-prettyprint-xml
      (lambda (&optional arg)
	"Format and indent xml."
	(interactive "p")
	(kmacro-exec-ring-item
	 (quote ([134217790 return 67108896 left 134217847 134217788 134217765 62 60 return 62 25 60 return 33 134217790 67108896 134217788 134217756] 0 "%d"))
	 arg)))
#+END_SRC

* TODO Misc copied from old config

#+BEGIN_SRC emacs-lisp
(use-package popwin
  :ensure t
  :config
  (popwin-mode 1))

(use-package shell-pop
  :ensure t
  :config
  (progn
    (setq shell-pop-shell-type (quote ("eshell" "*eshell*" (lambda nil (eshell)))))
    (setq shell-pop-universal-key "C-c t")))

;; (use-package origami)

;; (use-package customize-eshell
;;   :load-path "lisp")

(use-package 2048-game
 :ensure t)

(use-package anzu
 :ensure t)

(use-package visual-regexp
 :ensure t)

(use-package package-lint
 :ensure t)

(use-package pretty-mode
  :ensure t
  :config
  (progn
    ;; (global-pretty-mode t)
    ;; (global-prettify-symbols-mode 1)

    ;; (pretty-deactivate-groups
    ;;  '(:equality :ordering :ordering-double :ordering-triple
    ;; 	       :arrows :arrows-twoheaded :punctuation
    ;; 	       :logic :sets))

    (pretty-activate-groups
     '(:sub-and-superscripts
       :greek
       :arithmetic-nary
       :equality
       :ordering
       :ordering-double
       :ordering-triple
       :arrows
       :arrows-twoheaded
       :punctuation
       :logic
       :sets
       ))))

(use-package solaire-mode
  :ensure t
  :after (nord-theme doom-themes)
  :config
  (progn
    (require 'solaire-mode)
    ;; brighten buffers (that represent real files)
    (add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)
    ;; To enable solaire-mode unconditionally for certain modes:
    (add-hook 'ediff-prepare-buffer-hook #'solaire-mode)
    ;; ...if you use auto-revert-mode, this prevents solaire-mode from turning
    ;; itself off every time Emacs reverts the file
    (add-hook 'after-revert-hook #'turn-on-solaire-mode)
    ;; highlight the minibuffer when it is activated:
    (add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)
    ;; if the bright and dark background colors are the wrong way around, use this
    ;; to switch the backgrounds of the `default` and `solaire-default-face` faces.
    ;; This should be used *after* you load the active theme!
    ;;
    ;; NOTE: This is necessary for themes in the doom-themes package!
    (setq solaire-mode-auto-swap-bg 't)))

(use-package dashboard
  :ensure t
  :config
  (require 'dashboard)
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((recents  . 10)
                          (bookmarks . 10)
                          (projects . 5)
                          (agenda . 5)
                          (registers . 5))))

(use-package aggressive-indent
  :ensure t
  :config
  (progn
    (global-aggressive-indent-mode nil)
    (add-to-list 'aggressive-indent-excluded-modes 'java-mode)))

;; (use-package sidebar
;;   :straight (sidebar
;;              :type git
;;              :host github
;;              :repo "sebastiencs/sidebar.el"))

(use-package guru-mode
  :ensure t
  :hook prog-mode)



#+END_SRC

* End

#+BEGIN_SRC emacs-lisp
(provide 'init)
;;; init ends here
#+END_SRC
